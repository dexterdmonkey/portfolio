{"version":3,"file":"static/js/985.a0038cb1.chunk.js","mappings":"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","sources":["pages/PokemonDetailPage.tsx","pages/PokemonTypesPage.tsx","routers/dashboard.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\n\r\ninterface Pokemon {\r\n  id: number;\r\n  name: string;\r\n  base_experience: number;\r\n  height: number;\r\n  is_default: boolean;\r\n  order: number;\r\n  weight: number;\r\n}\r\n\r\nconst PokemonDetailPage: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchPokemon = async (id: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get<Pokemon>(\r\n        `https://pokeapi.co/api/v2/pokemon/${id}`\r\n      );\r\n      setPokemon(response.data);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch Pokemon details\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!id) {\r\n      setError(\"ID not found\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    fetchPokemon(id);\r\n  }, [id]);\r\n\r\n  if (loading) {\r\n    return <div className=\"text-center text-blue-500\">Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"text-center text-red-500\">{error}</div>;\r\n  }\r\n\r\n  if (!pokemon) {\r\n    return (\r\n      <div className=\"text-center text-red-500\">No Pokemon data found</div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">{pokemon.name}</h1>\r\n      <p>\r\n        <strong>ID:</strong> {pokemon.id}\r\n      </p>\r\n      <p>\r\n        <strong>Base Experience:</strong> {pokemon.base_experience}\r\n      </p>\r\n      <p>\r\n        <strong>Height:</strong> {pokemon.height}\r\n      </p>\r\n      <p>\r\n        <strong>Default:</strong> {pokemon.is_default ? \"Yes\" : \"No\"}\r\n      </p>\r\n      <p>\r\n        <strong>Order:</strong> {pokemon.order}\r\n      </p>\r\n      <p>\r\n        <strong>Weight:</strong> {pokemon.weight}\r\n      </p>\r\n      <button\r\n        className=\"mt-4 bg-blue-500 text-white py-2 px-4 rounded\"\r\n        onClick={() => navigate(-1)}\r\n      >\r\n        Back\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonDetailPage;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface PokemonType {\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\ninterface ApiResponse {\r\n  count: number;\r\n  next: string | null;\r\n  previous: string | null;\r\n  results: PokemonType[];\r\n}\r\n\r\nconst PokemonTypesPage: React.FC = () => {\r\n  const [pokemonTypeList, setPokemonTypeList] = useState<PokemonType[]>([]);\r\n  const [nextUrl, setNextUrl] = useState<string | null>(null);\r\n  const [prevUrl, setPrevUrl] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchPokemonTypes = async (url: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await axios.get<ApiResponse>(url);\r\n      setPokemonTypeList(response.data.results);\r\n      setNextUrl(response.data.next);\r\n      setPrevUrl(response.data.previous);\r\n    } catch (err) {\r\n      setError(\"Failed to fetch PokemonType list\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPokemonTypes(\"https://pokeapi.co/api/v2/type/\");\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container mx-auto p-4\">\r\n      <h1 className=\"text-2xl font-bold mb-4\">Pokemon Types</h1>\r\n      {loading && <div className=\"text-center text-blue-500\">Loading...</div>}\r\n      {error && <div className=\"text-center text-red-500\">{error}</div>}\r\n      <table className=\"min-w-full bg-white border border-gray-200\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"py-2 px-4 border-b\">No</th>\r\n            <th className=\"py-2 px-4 border-b\">Name</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {pokemonTypeList.map((pokemonType, index) => (\r\n            <tr key={pokemonType.name}>\r\n              <td className=\"py-2 px-4 border-b text-center\">\r\n                <NavLink to={`/dashboard/pokemonType/${pokemonType.name}`}>\r\n                  {index + 1}\r\n                </NavLink>\r\n              </td>\r\n              <td className=\"py-2 px-4 border-b text-center\">\r\n                <NavLink to={`/dashboard/pokemonType/${pokemonType.name}`}>\r\n                  {pokemonType.name}\r\n                </NavLink>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n      <div className=\"flex content-end mt-4 gap-4 w-full\">\r\n        {prevUrl && (\r\n          <button\r\n            className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n            onClick={() => fetchPokemonTypes(prevUrl)}\r\n            disabled={loading}\r\n          >\r\n            {loading ? \"Loading...\" : \"Previous\"}\r\n          </button>\r\n        )}\r\n        {nextUrl && (\r\n          <button\r\n            className=\"bg-blue-500 text-white py-2 px-4 rounded\"\r\n            onClick={() => fetchPokemonTypes(nextUrl)}\r\n            disabled={loading}\r\n          >\r\n            {loading ? \"Loading...\" : \"Next\"}\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PokemonTypesPage;\r\n","import PokemonDetailPage from \"pages/PokemonDetailPage\";\r\nimport PokemonTypesPage from \"pages/PokemonTypesPage\";\r\nimport React, { useState } from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\n\r\nconst DashboardPage = React.lazy(() => import(\"pages/DashboardPage\"));\r\nconst PokemonListPage = React.lazy(() => import(\"pages/PokemonListPage\"));\r\nconst SidebarComponent = React.lazy(\r\n  () => import(\"components/SidebarComponent\")\r\n);\r\nconst DashboardNavbarComponent = React.lazy(\r\n  () => import(\"components/DashboardNavbarComponent\")\r\n);\r\n\r\nconst Routers: React.FC = () => {\r\n  const [isSideOpen, setIsSideOpen] = useState(true);\r\n  const handleSideOpenChange = (isOpen: boolean) => {\r\n    setIsSideOpen(isOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"flex max-w-full\">\r\n        {isSideOpen && <SidebarComponent />}\r\n        <div className=\"w-full\">\r\n          <DashboardNavbarComponent onSideOpenChange={handleSideOpenChange} />\r\n          <Routes>\r\n            <Route path=\"/\" element={<DashboardPage />} />\r\n            <Route path=\"/pokemon\" element={<PokemonListPage />} />\r\n            <Route path=\"/pokemon/type\" element={<PokemonTypesPage />} />\r\n            <Route path=\"/pokemon/:id\" element={<PokemonDetailPage />} />\r\n          </Routes>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Routers;\r\n"],"names":["PokemonDetailPage","id","useParams","navigate","useNavigate","pokemon","setPokemon","useState","loading","setLoading","error","setError","useEffect","async","response","axios","get","concat","data","err","fetchPokemon","_jsx","className","children","_jsxs","name","base_experience","height","is_default","order","weight","onClick","PokemonTypesPage","pokemonTypeList","setPokemonTypeList","nextUrl","setNextUrl","prevUrl","setPrevUrl","fetchPokemonTypes","url","results","next","previous","map","pokemonType","index","NavLink","to","disabled","DashboardPage","React","PokemonListPage","SidebarComponent","DashboardNavbarComponent","Routers","isSideOpen","setIsSideOpen","_Fragment","onSideOpenChange","isOpen","Routes","Route","path","element"],"sourceRoot":""}